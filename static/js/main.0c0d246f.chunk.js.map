{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","Signin","className","onClick","provider","GoogleAuthProvider","signInWithPopup","Signout","currentUser","signOut","Chatroom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","scrollBottom","useRef","useEffect","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","role","aria-label","props","msgClass","src","alt","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"ySAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAkB3B,SAASC,IAMP,OACE,6BAASC,UAAU,cACjB,4BAAQC,QAPW,WACrB,IAAMC,EAAW,IAAIf,IAASU,KAAKM,mBACnCN,EAAKO,gBAAgBF,KAKnB,wBAKN,SAASG,IACP,OAAOR,EAAKS,aACV,4BAAQL,QAAS,kBAAMJ,EAAKU,YAA5B,YAIJ,SAASC,IAEP,IAAMC,EAAcX,EAAUY,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,YAAa,QAAQC,MAAM,IAH3C,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KAUZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAElBD,EAAEE,iBAFgB,EAIQ1B,EAAKS,YAAvBkB,EAJU,EAIVA,IAAKC,EAJK,EAILA,SAJK,SAMZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAWzC,IAASW,UAAU+B,WAAWC,kBACzCN,MACAC,aAVgB,OAYlBN,EAAa,IAZK,2CAAH,sDAcXY,EAAeC,mBAMrB,OAJAC,qBAAU,WACRF,EAAaG,QAAQC,eAAe,CAACC,SAAS,cAI9C,yBAAKpC,UAAU,gBACb,yBAAKA,UAAU,eACZgB,GAAYA,EAASqB,KAAI,SAACC,GAAD,OAAS,kBAACC,EAAD,CAAaC,IAAKF,EAAIG,GAAIC,QAASJ,OACtE,yBAAKK,IAAKZ,KAEZ,0BAAMa,SAAUxB,GACd,2BAAOyB,MAAO3B,EAAW4B,SAAU,SAACzB,GAAD,OAAOF,EAAaE,EAAE0B,OAAOF,QAAQG,YAAY,mBACpF,4BAAQC,KAAK,UAAS,0BAAMC,KAAK,MAAMC,aAAW,IAA5B,mBAM9B,SAASZ,EAAYa,GAAQ,IAAD,EACMA,EAAMV,QAA9Bf,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SACb4B,EAAW7B,IAAQ3B,EAAKS,YAAYkB,IAAM,UAAY,GAC5D,OACE,yBAAKxB,UAAS,gBAAWqD,IACvB,6BACE,yBAAKrD,UAAU,mBACb,yBAAKsD,IAAK7B,EAAU8B,IAAI,OAG5B,2BAAI5B,IAKK6B,MA9Ff,WAAe,MAEEC,YAAa5D,GAArB6D,EAFM,oBAIb,OACE,yBAAK1D,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAI,0BAAMkD,KAAK,MAAMC,aAAW,IAA5B,iBACJ,oCAAS,uCACT,kBAAC9C,EAAD,OAEDqD,EAAO,kBAAClD,EAAD,MAAe,kBAACT,EAAD,QCvBT4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlC,c","file":"static/js/main.0c0d246f.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\n// Import Firebase Dependencies\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\r\n\r\n// Init firebase API\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyD1NFUn4f22mneGY1Z9eIvrWp1dna_iYR8\",\r\n  authDomain: \"rumpi-chat-app.firebaseapp.com\",\r\n  databaseURL: \"https://rumpi-chat-app.firebaseio.com\",\r\n  projectId: \"rumpi-chat-app\",\r\n  storageBucket: \"rumpi-chat-app.appspot.com\",\r\n  messagingSenderId: \"187980907991\",\r\n  appId: \"1:187980907991:web:b4da30b248272e72aa3792\",\r\n  measurementId: \"G-WJSJPCB9HH\"\r\n});\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\n\r\nfunction App() {\r\n  // Get user auth\r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n        <h1><span role=\"img\" aria-label=\"\">ðŸ‘„</span></h1>\r\n        <h3>Rumpi<span>Chat</span></h3>\r\n        <Signout />\r\n      </header>\r\n      {user ? <Chatroom /> : <Signin />}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Signin() {\r\n  const signWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <section className=\"signinPage\">\r\n      <button onClick={signWithGoogle}>Sign in With Google</button>\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction Signout() {\r\n  return auth.currentUser && (\r\n    <button onClick={() => auth.signOut()}>Sign out</button>\r\n  );\r\n}\r\n\r\nfunction Chatroom() {\r\n  // Get collection\r\n  const messagesRef = firestore.collection('messages');\r\n  const query = messagesRef.orderBy('createdAt', 'desc').limit(25);\r\n  // Collection State\r\n  const [messages] = useCollectionData(query, { idField: 'id' });\r\n  // Form State\r\n  const [formValue, setFormValue] = useState('');\r\n\r\n  // Send Data Func\r\n  const sendMessage = async (e) => {\r\n    // Prevent form from submiting\r\n    e.preventDefault();\r\n    // Get user data from auth storage\r\n    const { uid, photoURL } = auth.currentUser;\r\n    // Send data to server\r\n    await messagesRef.add({\r\n      text: formValue,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL\r\n    });\r\n    setFormValue('');\r\n  }\r\n  const scrollBottom = useRef();\r\n  \r\n  useEffect(() => {\r\n    scrollBottom.current.scrollIntoView({behavior:'smooth'});\r\n  });\r\n\r\n  return (\r\n    <div className=\"chatroomPage\">\r\n      <div className=\"chat-bubble\">\r\n        {messages && messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\r\n        <div ref={scrollBottom}></div>\r\n      </div>\r\n      <form onSubmit={sendMessage}>\r\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Tulis pesan...\" />\r\n        <button type=\"submit\"><span role=\"img\" aria-label=\"\">ðŸ’¬</span></button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ChatMessage(props) {\r\n  const { text, uid, photoURL } = props.message;\r\n  const msgClass = uid === auth.currentUser.uid ? ' sender' : '';\r\n  return (\r\n    <div className={`bubble${msgClass}`}>\r\n      <div>\r\n        <div className=\"img-placeholder\">\r\n          <img src={photoURL} alt=\"\" />\r\n        </div>\r\n      </div>\r\n      <p>{text}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}